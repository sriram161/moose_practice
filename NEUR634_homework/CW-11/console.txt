bash-4.2$ ls
Desktop    Downloads	hermes_web	Music	  Public     tests.log
Documents  helios_html	moose_practice	Pictures  Templates  Videos
bash-4.2$ cd Downloads
bash-4.2$ ls
atom.x86_64.rpm  Classwork_lecture_2.txt  usr
bash-4.2$ cd usr
bash-4.2$ ls
bin  share  tests.log
bash-4.2$ cd bin
bash-4.2$ ls
apm  atom  tests.log
bash-4.2$ ls
apm  atom  tests.log
bash-4.2$ atom
bash-4.2$ cd
bash-4.2$ ls
Desktop    Downloads	hermes_web	Music	  Public     tests.log
Documents  helios_html	moose_practice	Pictures  Templates  Videos
bash-4.2$
bash-4.2$ module add python/2.7.15
bash-4.2$ module add neuron
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> from neuron import h, gui
NEURON -- VERSION 7.5 master (6b4c19f) 2017-09-25
Duke, Yale, and the BlueBrain Project -- Copyright 1984-2016
See http://neuron.yale.edu/neuron/credits

NEURON: unable to open font "*helvetica-medium-r-normal*--14*", using "fixed"
>>> soma= h.section(name='soma')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'hoc.HocObject' object has no attribute 'section'
>>> soma.h.Section(name='soma')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'soma' is not defined
>>> soma=h.Section(name='soma')
>>> soma.insert('pas')
soma
>>> asyn= h.AlphaSynapse(soma(0.5))
>>> dir(asyn)
['Section', '__call__', '__class__', '__delattr__', '__delitem__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__nonzero__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setitem__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', 'allsec', 'alpha', 'baseattr', 'cas', 'e', 'get_loc', 'gmax', 'has_loc', 'hname', 'hocobjptr', 'i', 'loc', 'next', 'onset', 'ref', 'same', 'setpointer', 'tau']
>>> asyn.e
0.0
>>> aync.gmax
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'aync' is not defined
>>> asyn.gmax
0.0
>>> asyn.gmax = 0.1
>>> asyn.onset
0.0
>>> asyn.onset = 1
>>> asyn.tau
0.1
>>> v_vec = h.Vector()
>>> t_vec = h.Vector()
>>> v_vec.record(soma(0.5)._ref_v)
1.0
>>> t_vec.record(h._ref_t)
1.0
>>> h.stop = 40
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: not assignable
>>> h.tstop = 40
>>> h.run()
0.0
>>> asyn.gmax=1
>>> asyn.onset=20
>>> from matplotlib import pyplot a plt
  File "<stdin>", line 1
    from matplotlib import pyplot a plt
                                  ^
SyntaxError: invalid syntax
>>> from matplotlib import pyplot as plt
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d56120110>]
>>> plt.show()
>>> plt.ion()
>>> asyn.gmax = 0.1
>>> h.run()
0.0
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d5640d5d0>]
>>> asyn.gmax = 1
>>> h.run()
0.0
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d59089310>]
>>> asyn.onset=1000
>>> esyn = h.ExpSyn(soma(0.5))
>>> esyn.e
0.0
>>> esyn.tau
0.1
>>> stim = h.NetStim()
>>> stim.number=1
>>> stim.start=9
>>> stim.interval=5
>>> ncstim.threshold
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'ncstim' is not defined
>>> ncstim = h.NetCon(stim, esyn)
>>> ncstim.delay = 1
>>> ncstim.weight[0] = 0.04
>>> h.run()
0.0
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d56442b10>]
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d56328710>]
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d562a66d0>]
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d560e5690>]
>>> ncstim.weight[0] = 0.08
>>> h.run()
0.0
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d5625d950>]
>>> ncstim.weight[0] = 0.8
>>> h.run()
0.0
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d562edad0>]
>>> ncstim.weight[0] = 8
>>> h.run()
0.0
>>> plt.xlim(5,70)
(5, 70)
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d561118d0>]
>>> plt.xlim(5,30)
(5, 30)
>>> plt.plot(t_vec, v_vec)
[<matplotlib.lines.Line2D object at 0x7f6d56106a90>]
>>>
