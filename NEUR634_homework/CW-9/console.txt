bash-4.2$ ls
Desktop    Downloads	hermes_web	Music	  Public     tests.log
Documents  helios_html	moose_practice	Pictures  Templates  Videos
bash-4.2$
bash-4.2$ ls
Desktop    Downloads	hermes_web	Music	  Public     tests.log
Documents  helios_html	moose_practice	Pictures  Templates  Videos
bash-4.2$ cd Downloads
bash-4.2$





















bash-4.2$ ls
atom.x86_64.rpm  Classwork_lecture_2.txt  usr
bash-4.2$ cd usr
bash-4.2$ ls
bin  share
bash-4.2$ cd bin
bash-4.2$ ls
apm  atom  tests.log
bash-4.2$ atom
bash-4.2$ cd ..
bash-4.2$ ls
bin  share
bash-4.2$













bash-4.2$ module add moose
moose/3.1.3(15):ERROR:151: Module 'moose/3.1.3' depends on one of the module(s) 'python/2.7.15'
moose/3.1.3(15):ERROR:102: Tcl command execution failed: prereq python/2.7.15

bash-4.2$ module add python/2.7.15
bash-4.2$ module add moose/3.1.3
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>> spikegen.getFieldNames('srcFinfo')
('childOut', 'spikeOut')
>>> spikegen.getFieldNames('destFinfo')
('parentMsg', 'setThis', 'getThis', 'setName', 'getName', 'getMe', 'getParent', 'getChildren', 'getPath', 'getClassName', 'setNumData', 'getNumData', 'setNumField', 'getNumField', 'getIdValue', 'getIndex', 'getFieldIndex', 'setTick', 'getTick', 'getDt', 'getValueFields', 'getSourceFields', 'getDestFields', 'getMsgOut', 'getMsgIn', 'getNeighbors', 'getMsgDests', 'getMsgDestFunctions', 'getIsA', 'process', 'reinit', 'Vm', 'setThreshold', 'getThreshold', 'setRefractT', 'getRefractT', 'setAbs_refract', 'getAbs_refract', 'getHasFired', 'setEdgeTriggered', 'getEdgeTriggered')
>>> soma = moose.Neutral('/cell')
>>> cell = moose.Neutral('/cell')
>>> soma = moose.Compartment('/cell/soma')
>>> dend = moose.Compartment('/cell/dend')
>>> exit()
bash-4.2$ ls
bin  share  tests.log
bash-4.2$ cd
bash-4.2$ cd moose_practice/
bash-4.2$ ls
channel_practice  LICENSE	 NEUR634_homework  test_create_npz_param  test_morph.py
gplotr_1.py	  moose_ex_1.py  README.md	   test_load_npz.py	  test_save_param.py
bash-4.2$ cd n
bash: cd: n: No such file or directory
bash-4.2$ cd NEUR634_homework/
bash-4.2$ ls
CW-3  CW-4  CW-5  CW-6	CW-7  CW-8  CW-9  HW-1	HW-2  HW-3  HW-4  HW-5	HW-6  HW-7  HW-8
bash-4.2$ cd CW-9
bash-4.2$ ls
notes.txt
bash-4.2$ pwd
/home/skappag/moose_practice/NEUR634_homework/CW-9
bash-4.2$ ls
notes.txt  synp.py  utilities.py
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "utilities.py", line 45
    def plot_vm_table(simtime, *comps, title="No title!!!", xlab="No x label!!!", ylab="No y label!!!"):
                                           ^
SyntaxError: invalid syntax
>>>
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>>
>>> soma_l = 50E-6
>>> soma_d = 25E-6
>>> soma_RM = 1 #20000
>>> soma_CM = 10E-3 #1E-6
>>> soma_RA = 4.0
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'create_compartment' is not defined
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'create_compartment' is not defined
>>>
>>> moose.connect(vmtab, 'requestOut', soma, 'getVm')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'vmtab' is not defined
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'soma' is not defined
>>> from utilities import create_compartment
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "utilities.py", line 45
    def plot_vm_table(simtime, *comps, title="No title!!!", xlab="No x label!!!", ylab="No y label!!!"):
                                           ^
SyntaxError: invalid syntax
>>> from utilities import create_compartment
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> soma_l = 50E-6
>>> soma_d = 25E-6
>>> soma_RM = 1 #20000
>>> soma_CM = 10E-3 #1E-6
>>> soma_RA = 4.0
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'length' is not defined
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'length' is not defined
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>> # Connections
... moose.connect(vmtab, 'requestOut', soma, 'getVm')
Traceback (most recent call last):
  File "<stdin>", line 2, in <module>
NameError: name 'vmtab' is not defined
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>> moose.connect(vmtab, 'requestOut', soma, 'getVm')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'vmtab' is not defined
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> moose.le()
Elements under /
/Msgs
/clock
/classes
/postmaster
/spikegen
/soma
/dend
/glu
['/Msgs', '/clock', '/classes', '/postmaster', '/spikegen', '/soma', '/dend', '/glu']
>>> sh = moose.SimpleSynhandler(syncha.path + '/synhandler')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'SimpleSynhandler'
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sh' is not defined
>>> sh.synapse.num = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sh' is not defined
>>> sh.synapse[0].delay = 1E-3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sh' is not defined
>>> sh = moose.SimpleSynHandler(syncha.path + '/synhandler')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'syncha' is not defined
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>> pre_syn = moose.RandSpike('presyn_input')
>>> pre_syn.rate=1.3
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
... moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyc.rate = 1.3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'presyc' is not defined
>>> presyn.refactT = 1E-3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'moose.RandSpike' object has no attribute 'refactT'
>>> presyn.rate = 1.3
>>> presyn.refactT = 1E-3
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'moose.RandSpike' object has no attribute 'refactT'
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
... moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 1E-3
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 1E-3
>>> sh.numSynapses
2L
>>> type(sh.numSynapses)
<type 'long'>
>>> sh.numSynapses
2L
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>> spiketable = moose.Table('spikes')
>>> moose.connect(randspike, 'spikeOut', spiketable, 'spike')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'randspike' is not defined
>>> moose.connect(presyn, 'spikeOut', spiketable, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
/spikes1 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
OUTGOING:
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>> moose.reint()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'module' object has no attribute 'reint'
>>> moose.reinit()
>>> moose.start(3)
>>> spiketable1.vector
array([1.7916])
>>> spiketable1.vector
array([1.7916])
>>> spiketable2.vector
array([0.1796])
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[1.7916]
>>> print(spiketable2.vector)
[0.1796]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 0.1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[1.7916]
>>> print(spiketable2.vector)
[0.1796]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 0.1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
... moose.setClock(8, plotdt)
  File "<stdin>", line 3
    moose.setClock(8, plotdt)
        ^
SyntaxError: invalid syntax
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[1.7916]
>>> print(spiketable2.vector)
[0.1796]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 0.1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1.3
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 1.3
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[0.9327]
>>> print(spiketable2.vector)
[0.3593]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 0.1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 130
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 350
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[0.0139]
>>> print(spiketable2.vector)
[0.0014]
>>>
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>>
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 130
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 350
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(3)
>>>
>>> print(spiketable1.vector)
[0.0139]
>>> print(spiketable2.vector)
[0.0014]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1300
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 3500
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(1)
>>>
>>> print(spiketable1.vector)
[0.0013]
>>> print(spiketable2.vector)
[0.0006]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1300
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 3500
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(1)
>>>
>>> print(spiketable1.vector)
[0.0013]
>>> print(spiketable2.vector)
[0.0006]
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> from utilities import *
>>>
>>> spikegen = moose.SpikeGen('spikegen')
>>> spikegen.threshold=0
>>> spikegen.refractT=1E-3
>>>
>>> length = 50E-6
>>> diameter = 25E-6
>>> RM = 1 #20000
>>> CM = 10E-3 #1E-6
>>> RA = 4.0
>>> EREST_ACT = -65E-3
>>> Em = -65E-3
>>>
>>> simtime = 0.3 # seconds
>>> simdt = 50E-6 #50E-6 # seconds
>>>
>>> soma = create_compartment('soma', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>> dend = create_compartment('dend', length, diameter, RM, CM, initVM=EREST_ACT, ELEAK=Em)
>>>
>>> synchan = moose.SynChan('glu')
>>> synchan.Gbar = 1E-8
>>> synchan.tau1 = 2E-3
>>> synchan.tau2 = 2E-3
>>> synchan.Ek = -10E-3
>>>
>>> # Connections
...
>>> moose.connect(soma, 'axialOut', dend, 'handleAxial')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> moose.connect(dend, 'channel', synchan, 'channel')
<moose.SingleMsg: id=5, dataIndex=1, path=/Msgs[0]/singleMsg[1]>
>>>
>>> sh = moose.SimpleSynHandler(synchan.path + '/synhandler')
>>>
>>> moose.connect(sh, 'activationOut', synchan, 'activation')
<moose.SingleMsg: id=5, dataIndex=2, path=/Msgs[0]/singleMsg[2]>
>>> sh.synapse.num = 1
>>> sh.synapse[0].delay = 1E-3
>>> moose.showmsg(sh)
INCOMING:
/glu[0]/synhandler ('parentMsg',) <--- /glu ('childOut',)
/glu[0]/synhandler ('process', 'reinit') <--- /clock ('process1', 'reinit1')
OUTGOING:
/glu[0]/synhandler ('childOut',) ---> /glu[0]/synhandler[0]/synapse ('parentMsg',)
/glu[0]/synhandler ('activationOut',) ---> /glu ('activation',)
>>>
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1300
>>> presyn.refractT = 1E-3
>>> moose.connect(presyn, 'spikeOut', sh.synapse[0], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=3, path=/Msgs[0]/singleMsg[3]>
>>> sh.synapse.num = 2
>>> sh.synapse[1].delay = 0.1E-3
>>>
>>> presyn2 = moose.RandSpike('presyn_input2')
>>> presyn2.rate = 3500
>>> presyn2.refractT = 1E-3
>>> moose.connect(presyn2, 'spikeOut', sh.synapse[1], 'addSpike')
<moose.SingleMsg: id=5, dataIndex=4, path=/Msgs[0]/singleMsg[4]>
>>>
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=5, path=/Msgs[0]/singleMsg[5]>
>>> spiketable2 = moose.Table('spikes2')
>>> moose.connect(presyn2, 'spikeOut', spiketable2, 'spike')
<moose.SingleMsg: id=5, dataIndex=6, path=/Msgs[0]/singleMsg[6]>
>>>
>>> moose.showmsg(spiketable1)
INCOMING:
/spikes1 ('parentMsg',) <--- / ('childOut',)
/spikes1 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes1 ('spike',) <--- /presyn_input ('spikeOut',)
OUTGOING:
>>> moose.showmsg(spiketable2)
INCOMING:
/spikes2 ('parentMsg',) <--- / ('childOut',)
/spikes2 ('process', 'reinit') <--- /clock ('process8', 'reinit8')
/spikes2 ('spike',) <--- /presyn_input2 ('spikeOut',)
OUTGOING:
>>>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(1)
>>>
>>> print(spiketable1.vector)
[0.0013]
>>> print(spiketable2.vector)
[0.0006]
>>> moose.le()
Elements under /
/Msgs
/clock
/classes
/postmaster
/spikegen
/soma
/dend
/glu
/presyn_input
/presyn_input2
/spikes1
/spikes2
['/Msgs', '/clock', '/classes', '/postmaster', '/spikegen', '/soma', '/dend', '/glu', '/presyn_input', '/presyn_input2', '/spikes1', '/spikes2']
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>> presyn = moose.RandSpike('presyn_input')
>>> presyn.rate = 1300
>>> presyn.refractT = 1E-3
>>> spiketable1 = moose.Table('spikes1')
>>> moose.connect(presyn, 'spikeOut', spiketable1, 'spike')
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>> simdt = 10E-5
>>> plotdt = 10E-5
>>> for lable in range(10):
...     moose.setClock(lable, simdt)
...
>>> moose.setClock(8, plotdt)
>>>
>>> moose.reinit()
>>> moose.start(1)
>>> print(spiketable1.vector)
[0.0011]
>>> moose.__version__
'3.1.1-523-g5693b83'
>>> exit()
bash-4.2$ python
Python 2.7.15 (default, Aug 13 2018, 18:21:39)
[GCC 6.3.1 20170216 (Red Hat 6.3.1-3)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import moose
>>>
>>>
>>> simtime = 0.1
>>> simdt = 0.25e-5
>>> plotdt = 0.25e-3
>>> for i in range(10):
...     moose.setClock(i, simdt)
... moose.setClock(8, plotdt)
  File "<stdin>", line 3
    moose.setClock(8, plotdt)
        ^
SyntaxError: invalid syntax
>>>
>>> spike = moose.RandSpike("/spike0")
>>> spike.rate = 1300
>>> spike.refractT = 1e-3
>>>
>>> tab = moose.Table("/pre0")
>>> moose.connect(spike,"spikeOut",tab,"spike")
<moose.SingleMsg: id=5, dataIndex=0, path=/Msgs[0]/singleMsg[0]>
>>>
>>> moose.reinit()
>>> moose.start(simtime)
>>>
>>> print(tab.vector)
[0.0023]
>>>
